generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  orders    Order[]
  createdAt DateTime @default(now())
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
}

model Product {
  id           String       @id @default(cuid())
  name         String
  slug         String       @unique
  description  String
  brand        String
  priceCents   Int
  rating       Float        @default(0)
  imageUrl     String?
  categoryId   String
  category     Category     @relation(fields: [categoryId], references: [id])
  inventory    Inventory?
  deals        Deal[]
  orderItems   OrderItem[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Inventory {
  id          String   @id @default(cuid())
  productId   String   @unique
  product     Product  @relation(fields: [productId], references: [id])
  quantity    Int      @default(0)
}

model Deal {
  id          String    @id @default(cuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  type        DealType
  discountPct Int       // 0-100
  startsAt    DateTime
  endsAt      DateTime
  active      Boolean   @default(true)
}

enum DealType {
  FLASH
  LIMITED
  CLEARANCE
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  items       OrderItem[]
  totalCents  Int
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
}

model OrderItem {
  id         String  @id @default(cuid())
  orderId    String
  order      Order   @relation(fields: [orderId], references: [id])
  productId  String
  product    Product @relation(fields: [productId], references: [id])
  quantity   Int
  priceCents Int     // snapshot price at purchase
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  CANCELLED
}
